using ConsoleApp1;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SromTests
{
    [TestFixture]
    public class Class1
    {
        

        [Test]
        [TestCase("11111100010111011010100111001110010010001001001101001001001101001010101100110011110010001111000100000100111000011011000111001110111111101011011101011001011000100101111111110010000001001100000001111001000110011011010011010011000101111010100",
               "01110111001111110100111101101110101101111100011111001100001100000001000010010011000111010100000101000100110000010101010101110100011110111111101110001000000111111010011110000110110010010001000100001110000011111110000100111101001101101111011",
               "10001011011000101110011010100000111111110101010010000101000001001011101110100000110101011011000001000000001000001110010010111010100001010100110011010001011111011111100001110100110011011101000101110111000101100101010111101110001000010101111")]
        [TestCase("01111001001100011010111110001010111011100010001011011110010010000011011001101110111111101100001001100011101011100110111111011000010000110111101011100101011101011110100100011010111",
               "10010100001000010101011000100001000010001110000111100010110001101001111010000010000101001001101011111010100101010010100000001001101010000001111001000110110001011011100101111010010",
               "11101101000100001111100110101011111001101100001100111100100011101010100011101100111010100101100010011001001110110100011111010001111010110110010010100011101100000101000001100000101")]
        [TestCase("00101110000010000000000011000011001100111011011010110111110000111001000001100001011010001011100011010110011100110101100011110111000001011010011000100100110111101011110010100100011111101101011111100100110011010100100010011001110001100100000",
               "11010010111110000001101100100101100111100111101110010110000001011111101111100010101100001101111101101000010000110011111000100010010001000101111100110110111101111100111011000010011110111011100110010001011010101001100110111101111100110111011",
               "11111100111100000001101111100110101011011100110100100001110001100110101110000011110110000110011110111110001100000110011011010101010000011111100100010010001010010111001001100110000001010110111001110101101001111101000100100100001101010011011")]
        [TestCase("11110111011011100001010011010000101110101010110000101001100101010000011000010011100000101111110010110011111111110101111000011000010010110110011101001111111001011010010110101",
       "0",
       "11110111011011100001010011010000101110101010110000101001100101010000011000010011100000101111110010110011111111110101111000011000010010110110011101001111111001011010010110101")]


        public void AddTest(string pol1, string pol2, string expectedResult)
        {
            var a = Program.BinToArr(pol1);
            var b = Program.BinToArr(pol2);
         
            var actualResult = Program.ArrToBin(Program.Addition(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("01011011001100001000101111111011110101100011000011110000010001000100101110110000100011010001010100101111001110010110011010011011100001010110101100111111011000011111010001100110101000011101010111100100101011101011011101001101011100110001100",
                "11000011101010010001001111011010011010110011011000000111100000110111000010101101011111001011101100110000100010110100001101010101010001110110000000001001010010111011011000000010111110100100010100111110101111001111100011100111110010010100001",
                "00011100111011101111010101001000101011010011110110000110101000101111000011011000011111110111010100000100001010111000010101100101001100101001101111000011110111101001111100001000001000101101011011110111101010110011000000010100100100001110011")]
        [TestCase("00110010011111110001100100110010011010011001000110010110000011001110101000001101010111001101001111100100010010111000001111000110000001110100001010011011000000101010000000101011000111101001011000101001110110011100011011000100100000111100100",
                "01001100101010110100111000010011010010110001000101111100110010111111011111110110111001111111101011110000001000001101000001101100111110110100000111101000011001000001100010111110100100010001111010011000101011001100001000000111101000001000000",
                "00110001101010001010111001111000000110100110100001011111110010001000110100010010110111001001111001011110100100000110110000101011000000010011001111011101000010100011000111011100000011100010101001100001000001110000100111100010101010101011010")]
        [TestCase("00100011101010111001010001010000101100101101110100110010011110101010001010010010100110000010000111011000010110011011011001010000011001000100111111101111010011101010011011100111100000000100101010001111101101011111100000101010010100100100101",
                "01100000001111010010111001010110110000011011111110111111110100100000010100010011001101101000011011100110010100100111110111001001101101111001101100011001101101100111011111010111001001000000100011110011011110111011100111001111100001000011001",
                "00101001111111110011011000011011100101111000001010100001010101101110011011100101101000101001011011111101111111111110111110011100000101010110010001101001010100100100100100000011001100011010110010011101001101001010110110100111111010011000010")]
        [TestCase("01011010010100100100111110100110111011110111000000011111101010110001110010101011100000011100011010010111101111001110011110111101101101111001011111101100100011001111111101110101011001101101101010101000010111101010000111101010001011011001011",
                "11010110111001111111010000011101100100001100000000011010010000010111110011001000111011011001011100110011011001010010110001011001011010110111110011101101000111111011101100111011000010101011011101000100011100111111001010000011111110001000000",
                "00000001100100011100101111011111001011110101010110010100111111010001001001000000000000001100101100001100001101000111001001100100001101110111001011011010011010000010101111011001101110101111011000000110111011010101001100100101000101111000101")]
        public void MultiplicationTest(string pol1, string pol2, string expectedResult)
        {
            var a = Program.BinToArr(pol1);
            var b = Program.BinToArr(pol2);

            var actualResult = Program.ArrToBin(Program.Multiplication(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("00111011100101111000110101000010011111110000000101010111100001000101010010001101000000110000100011101000010011010000011111011011010111011010111011101101010111110000101000101110000001101100110000000001011110100110010001011001011001011101001",
                "00010010111100101110111111101010111010111001111101010000100111100110001000000001000010001010111111010101010010001100100011110010011111110111000101000001101101010000101010011001001000011110100110101101010010000111100100010111101100100011001")]
        [TestCase("11100101001011110111010101010000000000000011001110011001000100101101101010100100110110000010101011111110011011100110011100010110100101111101000111000001111000010111111111010101011011100000111101101110001100001001001100011010101001111110011",
                "10101110110101111011011110101001010010110111011111011111000000001010100010000010001100010001000011101110110011011010010110010101100101001111111101111110111110111011011001100010000101111111010100100000001001000110111110100100011010100001100")]
        [TestCase("01111100100101111010100111111100101000101011001101110110010100110001010010100100101111001101001010101001011100001000101110101011111111100111011001000010101011000000000100010010000000111100001010001101111011110110001000001011011001001010101",
                "11101000000110011100111111100000011111011110010010000000101100011101110010110111010100011001000111100011011011001111011110010001100011010111101111011110111100010101100000011001000111110011111101010111011001011100101110000011100010010100111")]
        public void SquareTest(string pol1, string expectedResult)
        {
            var a = Program.BinToArr(pol1);
            var actualResult = Program.ArrToBin(Program.Square(a));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("01000100001010101110000111010010000001001001001010101111001010100010001010100100010000010110000111111000010000011001101011111010000011011111100101000001101111001010100111011011111010001000011111111100000101101010001100011111101101001100100",
                "1")]
        [TestCase("11110010100111110100111001101010011011000010101001000001101001010100100110101110001001111010110000011001010110000111010101100001100111101110001111110100000100011111000101010010010110001110110110101010101101100101001000101001101110001101101",
                "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
        [TestCase("11000100111001000010001111011100101100001100100111000100011011101000111011101111101100001000111000111110100100110100011010010110000110011101110101000011000010011100101011100110100111100010101101000100000111011000001100000111110100100010000",
                "1")]
        public void TraceTest(string pol1, string expectedResult)
        {
            var a = Program.BinToArr(pol1);
            var actualResult = Program.ArrToBin(Program.Trace(a));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("01110010101110011000110010001010111001000100111100101110010000001000011101111100001100000110111100111000011010001100011111001110111011101101011101011010101111011001011101010111001111000010010111100010111100100000011110111010100110111111010",
                "10001010101110101011000101110110011001110111101010011100100110000011000010001110110101011000111110010011011001011010010110000000000110110110100111001010001111101110011011010001110001100101011101111100100000011000110101111110111110111010100",
                "00010001000011011011010100110001010110110101101111000011110101010100111111010010001111001111010001001110100111110001100001110011000000110100011111101000010000000101100111101010101011101001111110101101110001111010010001011000100111010010110")]
        [TestCase("11011001101111010100111000111010001110000000110100101011001101001100101010010010110101101010111001011000100001001000010110011011101011010111100110101010000101100110011111011000001001101100101010110101100010111100110000101001000100110110000",
                "00110001110111011000010100001111101111010011110111000001101100111101111101000010110111111010011010111001101001110101100100000010110010110011111010011011011101111100001100010101111101000100000000010010101011100001100101000110011100000000011",
                "10111001010011001101001111100101110000001111001000101001010001111100001100000010110011010111100100101010001110111000011001010111010110001011000111110100110010101001110101110110001100100100010011010011101011101011111110111110110010001011000")]
        [TestCase("00101010000000001100101111010011110100011010001011010001001110000111011101010010011111101000110011011111110010110110110100110000101100000111101000101111111101001010001011010101000000111100110111011111001001111100000000111101101111100001100",
                "10011010101111001010111000011001001011110001110101101100001110010100000100000010000010010000010011000011111010011100100100110001011000010000110101101011010101111111101001110010001000001011100101000110101011101101110111110100101000010100100",
                "00010100000000101001010101001110101010100101000111110101001110101011101011100000110000100001111000000111010100100101111111100100010001000110110111001110010001011100111100001000101110101101011111001100111111011011001000000010001111100100000")]

        public void PowerTest(string pol1, string N, string expectedResult)
        {
            var a = Program.BinToArr(pol1);
            var n = Program.BinToArr(N);
            var actualResult = Program.ArrToBin(Program.Power(a, n));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]

        [TestCase("00111001011001101111101010101001011000100010101001000000011011100011101000011010010010110101110101001010110100001010100101011000011000010100100101100011101111000111011001111101101010111101000101001111100101011110010111110110000110101101100",
                "10101100110100110100100111101011110011100100101011001001010100110101011000000011101101110110010100110000101001111110000000100010000001100111000101011100010101101000000000000100010010001010001011110111011001101110101101000010101010101000100")]
        [TestCase("00010110000110110101010010000101111110101000010000001101011101000011100100100000001111001011000001100000000101010000000100110000100010011010010110010001010000101010110111001100100000101101101101101001000110101011011000000001101001001001101",
                "11010110011100110110100110101010110100010001111001100010011011101110101111101111010011101011100001000100110001100101011101110010111101000010100101110110011101011000110110111001110110010111010011100101010100010011000101001100011101010110001")]
        [TestCase("11101010101010001010111100110010100100100011010011101000111100010111001001100000001101011001100001001001000100010000100110001011100111000110101001000111001011111010010110001010000101011000001010001100111010101111100111001111101110110101100",
                "00001100111001010111111111110010011000010000000001000101101100011000000110000111000110101110010000100001011110011100000101000010011000101011111101100100110100000110001000100101101001010111010110001001100010101001010101000101011111010110011")]
        [TestCase("10111011111110011011010000001101010011110101111011110010110110101010000110101101001001011101010101111001111100010100110011100011010100101101101001101111111010010001011010011111011011110010101000000001101110010111101111101111111111110100010",
                "00111100101110001000010001010000000101011010000010000111100011000000001101011000010111101011100111010011111010100110011001111000001100111110011100001101011110100101101101000010110111000010100110100100001010000101010111001000000110001000001")]

        public void InverseTest(string pol1, string expectedResult)
        {

            var a = Program.BinToArr(pol1);
            var actualResult = Program.ArrToBin(Program.Inversed(a));

            Assert.AreEqual(expectedResult, actualResult);
        }
    }


}
